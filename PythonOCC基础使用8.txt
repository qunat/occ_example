
PythonOCC基础使用：opencascade三维建模命令——一个链轮的绘制（很重要）
原创
小新快跑123 最后发布于2019-07-21 22:23:57 阅读数 320 

收藏 
展开 
先上效果图：

import sys
from math import pi as M_PI, sin, cos, atan

from OCC.Core.gp import (gp_Pnt2d, gp_Ax2d, gp_Dir2d, gp_Circ2d, gp_Origin2d, gp_DX2d,
                         gp_Ax2, gp_OX2d, gp_Lin2d, gp_Trsf, gp_XOY,
                         gp_Pnt, gp_Vec, gp_Ax3, gp_Pln, gp_Origin, gp_DX, gp_DY,
                         gp_DZ, gp_OZ)
from OCC.Core.GCE2d import GCE2d_MakeArcOfCircle, GCE2d_MakeCircle, GCE2d_MakeLine
from OCC.Core.Geom2dAPI import Geom2dAPI_InterCurveCurve
from OCC.Core.Geom2d import Geom2d_TrimmedCurve
from OCC.Core.GeomAPI import geomapi_To3d
from OCC.Core.BRepBuilderAPI import (BRepBuilderAPI_MakeEdge,
                                     BRepBuilderAPI_MakeWire,
                                     BRepBuilderAPI_MakeFace,
                                     BRepBuilderAPI_Transform)
from OCC.Core.BRepPrimAPI import (BRepPrimAPI_MakePrism, BRepPrimAPI_MakeRevol,
                                  BRepPrimAPI_MakeCylinder, BRepPrimAPI_MakeCone)
from OCC.Core.GccAna import GccAna_Circ2d2TanRad
from OCC.Core.BRepAlgoAPI import BRepAlgoAPI_Cut, BRepAlgoAPI_Fuse
from OCC.Core.BRepFilletAPI import BRepFilletAPI_MakeFillet2d
from OCC.Core.BRepTools import BRepTools_WireExplorer
from OCC.Display.SimpleGui import init_display

roller_diameter = 10.2
pitch = 15.875
num_teeth = 40
chain_width = 6.35

#  Dimensions derived from the provided inputs
roller_radius = roller_diameter / 2.
tooth_angle = (2 * M_PI) / num_teeth
pitch_circle_diameter = pitch / sin(tooth_angle / 2.)
pitch_circle_radius = pitch_circle_diameter / 2.

roller_contact_angle_min = (M_PI * 120 / 180) - ((M_PI / 2.) / num_teeth)
roller_contact_angle_max = (M_PI * 140 / 180) - ((M_PI / 2.) / num_teeth)
roller_contact_angle = (roller_contact_angle_min + roller_contact_angle_max) / 2.

tooth_radius_min = 0.505 * roller_diameter
tooth_radius_max = tooth_radius_min + (0.069 * pow(roller_diameter, 1.0 / 3.0))
tooth_radius = (tooth_radius_min + tooth_radius_max) / 2.

profile_radius = 0.12 * roller_diameter * (num_teeth + 2)
top_diameter = pitch_circle_diameter + ((1 - (1.6 / num_teeth)) * pitch) - roller_diameter
top_radius = top_diameter / 2.

thickness = chain_width * 0.95

# Center hole data
center_radius = 125.0 / 2.

# Mounting hole data
mounting_hole_count = 6
mounting_radius = 153.0 / 2.
hole_radius = 8.5 / 2.


def build_tooth():
    base_center = gp_Pnt2d(pitch_circle_radius + (tooth_radius - roller_radius), 0)
    base_circle = gp_Circ2d(gp_Ax2d(base_center, gp_Dir2d()), tooth_radius)
    trimmed_base = GCE2d_MakeArcOfCircle(base_circle,
                                         M_PI - (roller_contact_angle / 2.),
                                         M_PI).Value()
    trimmed_base.Reverse()  # just a trick
    p0 = trimmed_base.StartPoint()
    p1 = trimmed_base.EndPoint()

    # Determine the center of the profile circle
    x_distance = cos(roller_contact_angle / 2.) * (profile_radius + tooth_radius)
    y_distance = sin(roller_contact_angle / 2.) * (profile_radius + tooth_radius)
    profile_center = gp_Pnt2d(pitch_circle_radius - x_distance, y_distance)

    # Construct the profile circle gp_Circ2d
    profile_circle = gp_Circ2d(gp_Ax2d(profile_center, gp_Dir2d()),
                               profile_center.Distance(p1))
    geom_profile_circle = GCE2d_MakeCircle(profile_circle).Value()

    # Construct the outer circle gp_Circ2d
    outer_circle = gp_Circ2d(gp_Ax2d(gp_Pnt2d(0, 0), gp_Dir2d()), top_radius)
    geom_outer_circle = GCE2d_MakeCircle(outer_circle).Value()

    inter = Geom2dAPI_InterCurveCurve(geom_profile_circle, geom_outer_circle)
    num_points = inter.NbPoints()
    assert isinstance(p1, gp_Pnt2d)
    if num_points == 2:
        if p1.Distance(inter.Point(1)) < p1.Distance(inter.Point(2)):
            p2 = inter.Point(1)
        else:
            p2 = inter.Point(2)
    elif num_points == 1:
        p2 = inter.Point(1)
    else:
        sys.exit(-1)

    # Trim the profile circle and mirror
    trimmed_profile = GCE2d_MakeArcOfCircle(profile_circle, p1, p2).Value()

    # Calculate the outermost point
    p3 = gp_Pnt2d(cos(tooth_angle / 2.) * top_radius,
                  sin(tooth_angle / 2.) * top_radius)

    # and use it to create the third arc
    trimmed_outer = GCE2d_MakeArcOfCircle(outer_circle, p2, p3).Value()

    # Mirror and reverse the three arcs
    mirror_axis = gp_Ax2d(gp_Origin2d(), gp_DX2d().Rotated(tooth_angle / 2.))

    mirror_base = Geom2d_TrimmedCurve.DownCast(trimmed_base.Copy())
    mirror_profile = Geom2d_TrimmedCurve.DownCast(trimmed_profile.Copy())
    mirror_outer = Geom2d_TrimmedCurve.DownCast(trimmed_outer.Copy())

    mirror_base.Mirror(mirror_axis)
    mirror_profile.Mirror(mirror_axis)
    mirror_outer.Mirror(mirror_axis)

    mirror_base.Reverse()
    mirror_profile.Reverse()
    mirror_outer.Reverse()

    # Replace the two outer arcs with a single one
    outer_start = trimmed_outer.StartPoint()
    outer_mid = trimmed_outer.EndPoint()
    outer_end = mirror_outer.EndPoint()

    outer_arc = GCE2d_MakeArcOfCircle(outer_start, outer_mid, outer_end).Value()

    # Create an arc for the inside of the wedge
    inner_circle = gp_Circ2d(gp_Ax2d(gp_Pnt2d(0, 0), gp_Dir2d()),
                             top_radius - roller_diameter)
    inner_start = gp_Pnt2d(top_radius - roller_diameter, 0)
    inner_arc = GCE2d_MakeArcOfCircle(inner_circle, inner_start, tooth_angle).Value()
    inner_arc.Reverse()

    # Convert the 2D arcs and two extra lines to 3D edges
    plane = gp_Pln(gp_Origin(), gp_DZ())
    arc1 = BRepBuilderAPI_MakeEdge(geomapi_To3d(trimmed_base, plane)).Edge()
    arc2 = BRepBuilderAPI_MakeEdge(geomapi_To3d(trimmed_profile, plane)).Edge()
    arc3 = BRepBuilderAPI_MakeEdge(geomapi_To3d(outer_arc, plane)).Edge()
    arc4 = BRepBuilderAPI_MakeEdge(geomapi_To3d(mirror_profile, plane)).Edge()
    arc5 = BRepBuilderAPI_MakeEdge(geomapi_To3d(mirror_base, plane)).Edge()

    p4 = mirror_base.EndPoint()
    p5 = inner_arc.StartPoint()

    lin1 = BRepBuilderAPI_MakeEdge(gp_Pnt(p4.X(), p4.Y(), 0),
                                   gp_Pnt(p5.X(), p5.Y(), 0)).Edge()
    arc6 = BRepBuilderAPI_MakeEdge(geomapi_To3d(inner_arc, plane)).Edge()

    p6 = inner_arc.EndPoint()
    lin2 = BRepBuilderAPI_MakeEdge(gp_Pnt(p6.X(), p6.Y(), 0),
                                   gp_Pnt(p0.X(), p0.Y(), 0)).Edge()

    wire = BRepBuilderAPI_MakeWire(arc1)
    wire.Add(arc2)
    wire.Add(arc3)
    wire.Add(arc4)
    wire.Add(arc5)
    wire.Add(lin1)
    wire.Add(arc6)
    wire.Add(lin2)

    face = BRepBuilderAPI_MakeFace(wire.Wire())

    wedge = BRepPrimAPI_MakePrism(face.Shape(), gp_Vec(0.0, 0.0, thickness))

    return wedge.Shape()


def round_tooth(wedge):
    round_x = 2.6
    round_z = 0.06 * pitch
    round_radius = pitch

    # Determine where the circle used for rounding has to start and stop
    p2d_1 = gp_Pnt2d(top_radius - round_x, 0)
    p2d_2 = gp_Pnt2d(top_radius, round_z)

    # Construct the rounding circle
    round_circle = GccAna_Circ2d2TanRad(p2d_1, p2d_2, round_radius, 0.01)
    if (round_circle.NbSolutions() != 2):
        sys.exit(-2)

    round_circle_2d_1 = round_circle.ThisSolution(1)
    round_circle_2d_2 = round_circle.ThisSolution(2)

    if (round_circle_2d_1.Position().Location().Coord()[1] >= 0):
        round_circle_2d = round_circle_2d_1
    else:
        round_circle_2d = round_circle_2d_2

    # Remove the arc used for rounding
    trimmed_circle = GCE2d_MakeArcOfCircle(round_circle_2d, p2d_1, p2d_2).Value()

    # Calculate extra points used to construct lines
    p1 = gp_Pnt(p2d_1.X(), 0, p2d_1.Y())
    p2 = gp_Pnt(p2d_2.X(), 0, p2d_2.Y())
    p3 = gp_Pnt(p2d_2.X() + 1, 0, p2d_2.Y())
    p4 = gp_Pnt(p2d_2.X() + 1, 0, p2d_1.Y() - 1)
    p5 = gp_Pnt(p2d_1.X(), 0, p2d_1.Y() - 1)

    # Convert the arc and four extra lines into 3D edges
    plane = gp_Pln(gp_Ax3(gp_Origin(), gp_DY().Reversed(), gp_DX()))
    arc1 = BRepBuilderAPI_MakeEdge(geomapi_To3d(trimmed_circle, plane)).Edge()
    lin1 = BRepBuilderAPI_MakeEdge(p2, p3).Edge()
    lin2 = BRepBuilderAPI_MakeEdge(p3, p4).Edge()
    lin3 = BRepBuilderAPI_MakeEdge(p4, p5).Edge()
    lin4 = BRepBuilderAPI_MakeEdge(p5, p1).Edge()

    # Make a wire composed of the edges
    round_wire = BRepBuilderAPI_MakeWire(arc1)
    round_wire.Add(lin1)
    round_wire.Add(lin2)
    round_wire.Add(lin3)
    round_wire.Add(lin4)

    # Turn the wire into a face
    round_face = BRepBuilderAPI_MakeFace(round_wire.Wire()).Shape()

    # Revolve the face around the Z axis over the tooth angle
    rounding_cut_1 = BRepPrimAPI_MakeRevol(round_face, gp_OZ(), tooth_angle).Shape()

    # Construct a mirrored copy of the first cutting shape
    mirror = gp_Trsf()
    mirror.SetMirror(gp_XOY())
    mirrored_cut_1 = BRepBuilderAPI_Transform(rounding_cut_1, mirror, True).Shape()

    # and translate it so that it ends up on the other side of the wedge
    translate = gp_Trsf()
    translate.SetTranslation(gp_Vec(0, 0, thickness))
    rounding_cut_2 = BRepBuilderAPI_Transform(mirrored_cut_1, translate, False).Shape()

    # Cut the wedge using the first and second cutting shape
    cut_1 = BRepAlgoAPI_Cut(wedge, rounding_cut_1).Shape()
    cut_2 = BRepAlgoAPI_Cut(cut_1, rounding_cut_2).Shape()

    return cut_2


def clone_tooth(base_shape):
    clone = gp_Trsf()
    grouped_shape = base_shape

    # Find a divisor, between 1 and 8, for the number_of teeth
    multiplier = 1
    max_multiplier = 1
    for i in range(0, 8):
        if num_teeth % multiplier == 0:
            max_multiplier = i + 1

    multiplier = max_multiplier
    for i in range(1, multiplier):
        clone.SetRotation(gp_OZ(), -i * tooth_angle)
        rotated_shape = BRepBuilderAPI_Transform(base_shape, clone, True).Shape()
        grouped_shape = BRepAlgoAPI_Fuse(grouped_shape, rotated_shape).Shape()

    # Rotate the basic tooth and fuse together
    aggregated_shape = grouped_shape
    for i in range(1, int(num_teeth / multiplier)):
        clone.SetRotation(gp_OZ(), - i * multiplier * tooth_angle)
        rotated_shape = BRepBuilderAPI_Transform(grouped_shape, clone, True).Shape()
        aggregated_shape = BRepAlgoAPI_Fuse(aggregated_shape, rotated_shape).Shape()

    cylinder = BRepPrimAPI_MakeCylinder(gp_XOY(),
                                        top_radius - roller_diameter,
                                        thickness)
    aggregated_shape = BRepAlgoAPI_Fuse(aggregated_shape,
                                        cylinder.Shape()).Shape()

    return aggregated_shape


def center_hole(base):
    cylinder = BRepPrimAPI_MakeCylinder(center_radius, thickness).Shape()
    cut = BRepAlgoAPI_Cut(base, cylinder)
    return cut.Shape()


def mounting_holes(base):
    result = base
    for i in range(0, mounting_hole_count):
        center = gp_Pnt(cos(i * M_PI / 3) * mounting_radius,
                        sin(i * M_PI / 3) * mounting_radius, 0.0)
        center_axis = gp_Ax2(center, gp_DZ())

        cylinder = BRepPrimAPI_MakeCylinder(center_axis, hole_radius,
                                            thickness).Shape()
        result = BRepAlgoAPI_Cut(result, cylinder).Shape()

        cone = BRepPrimAPI_MakeCone(center_axis,
                                    hole_radius + thickness / 2.,
                                    hole_radius, thickness / 2.)
        result = BRepAlgoAPI_Cut(result, cone.Shape()).Shape()

    return result


def cut_out(base):
    outer = gp_Circ2d(gp_OX2d(), top_radius - 1.75 * roller_diameter)
    inner = gp_Circ2d(gp_OX2d(), center_radius + 0.75 * roller_diameter)

    geom_outer = GCE2d_MakeCircle(outer).Value()
    geom_inner = GCE2d_MakeCircle(inner).Value()
    geom_inner.Reverse()

    base_angle = (2. * M_PI) / mounting_hole_count
    hole_angle = atan(hole_radius / mounting_radius)
    correction_angle = 3 * hole_angle

    left = gp_Lin2d(gp_Origin2d(), gp_DX2d())
    right = gp_Lin2d(gp_Origin2d(), gp_DX2d())
    left.Rotate(gp_Origin2d(), correction_angle)
    right.Rotate(gp_Origin2d(), base_angle - correction_angle)

    geom_left = GCE2d_MakeLine(left).Value()
    geom_right = GCE2d_MakeLine(right).Value()

    inter_1 = Geom2dAPI_InterCurveCurve(geom_outer, geom_left)
    inter_2 = Geom2dAPI_InterCurveCurve(geom_outer, geom_right)
    inter_3 = Geom2dAPI_InterCurveCurve(geom_inner, geom_right)
    inter_4 = Geom2dAPI_InterCurveCurve(geom_inner, geom_left)

    if inter_1.Point(1).X() > 0:
        p1 = inter_1.Point(1)
    else:
        p1 = inter_1.Point(2)

    if inter_2.Point(1).X() > 0:
        p2 = inter_2.Point(1)
    else:
        p2 = inter_2.Point(2)

    if inter_3.Point(1).X() > 0:
        p3 = inter_3.Point(1)
    else:
        p3 = inter_3.Point(2)

    if inter_4.Point(1).X() > 0:
        p4 = inter_4.Point(1)
    else:
        p4 = inter_4.Point(2)

    trimmed_outer = GCE2d_MakeArcOfCircle(outer, p1, p2).Value()
    trimmed_inner = GCE2d_MakeArcOfCircle(inner, p4, p3).Value()

    plane = gp_Pln(gp_Origin(), gp_DZ())

    arc1 = BRepBuilderAPI_MakeEdge(geomapi_To3d(trimmed_outer, plane)).Edge()

    lin1 = BRepBuilderAPI_MakeEdge(gp_Pnt(p2.X(), p2.Y(), 0),
                                   gp_Pnt(p3.X(), p3.Y(), 0)).Edge()

    arc2 = BRepBuilderAPI_MakeEdge(geomapi_To3d(trimmed_inner, plane)).Edge()

    lin2 = BRepBuilderAPI_MakeEdge(gp_Pnt(p4.X(), p4.Y(), 0),
                                   gp_Pnt(p1.X(), p1.Y(), 0)).Edge()

    cutout_wire = BRepBuilderAPI_MakeWire(arc1)
    cutout_wire.Add(lin1)
    cutout_wire.Add(arc2)
    cutout_wire.Add(lin2)

    # Turn the wire into a face
    cutout_face = BRepBuilderAPI_MakeFace(cutout_wire.Wire())
    filleted_face = BRepFilletAPI_MakeFillet2d(cutout_face.Face())

    explorer = BRepTools_WireExplorer(cutout_wire.Wire())
    while explorer.More():
        vertex = explorer.CurrentVertex()
        filleted_face.AddFillet(vertex, roller_radius)
        explorer.Next()

    cutout = BRepPrimAPI_MakePrism(filleted_face.Shape(),
                                   gp_Vec(0.0, 0.0, thickness)).Shape()

    result = base
    rotate = gp_Trsf()
    for i in range(0, mounting_hole_count):
        rotate.SetRotation(gp_OZ(), i * 2. * M_PI / mounting_hole_count)
        rotated_cutout = BRepBuilderAPI_Transform(cutout, rotate, True)

        result = BRepAlgoAPI_Cut(result,
                                 rotated_cutout.Shape()).Shape()

    return result


def build_sprocket():
    # create the sprocket model
    wedge = build_tooth()
    rounded_wedge = round_tooth(wedge)
    basic_disk = clone_tooth(rounded_wedge)
    cut_disc = center_hole(basic_disk)
    mountable_disc = mounting_holes(cut_disc)
    sprocket = cut_out(mountable_disc)
    return sprocket


sprocket_model = build_sprocket()
# display the sprocket
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399

点赞 1 

收藏

分享


 
小新快跑123 
发布了101 篇原创文章 · 获赞 42 · 访问量 7万+
私信 
关注
展开阅读全文 




 
 
PythonOCC入门进阶到实战 
阅读数 3286 
本教程的目的各位看客能搜到本篇教程，想必是奔着软件开发来的，使用python开发一款特定功能的cad/cae软件，如果你有什么不懂，可以随时联系我：QQ1185753125我也不再废话，希望借助此教程... 
博文
来自： weixin_42755384的博客
基于OpenCASCADE自制三维建模软件（七）立方体、圆柱、球、圆锥、圆环 
阅读数 505 
Open CASCADE有现成的模型，包括立方体、圆柱、球、圆锥和圆环等，现制作点击按钮生成以上模型。... 
博文
来自： jelatine的博客
中文教程OpenCascade中文教程 
11-26
OpenCascade中文教程 OCC 是用面向对象方法设计的一个CAD 基础平台（软件）。为了能从整体 上把握OCC 的组织情况，也为了方便后续章节的讨论，本章将介绍OCC 体系 结构和几个基本概念 
下载
pythonocc入门指导：1.搭建pythonocc的虚拟开发环境 
阅读数 2981 
0.前言pythonOCC也就是opencascade的python封装版本1.所需材料anacondaAnaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多... 
博文
来自： weixin_42755384的博客


qt下使用opencascade源代码 
阅读数 1423 
c++基础太弱，纠正一下，在PRO中使用包含目录就可以使用&lt;&gt;，将下载的opencascade文件通过make编译和安装，添加引用就可以了。如果你依然对以下没用的操作感兴趣... 
博文
来自： my393661的博客
PythonOCC基础使用：建模——三维特征运算（拉伸/放样/管道/沿路径放样 
阅读数 484 
占坑。 
博文
来自： weixin_42755384的博客
Opencascade开发 
11-05
最近在研究opencascade开发，发现代码是c++格式，之前一直在做c#开发，目前想做一个中间层能承接c++代码和c#代码，研究了一段时间发现c++/cli可以，但是我是新手完全不知道怎么写中间层
论坛
OpenCASCADE 开发框架（一） 
阅读数 1126 
话说OpenCASCADE是个好东西，但确实难用，尤其其显示模块更难用，搭个架子是真心困难。于是建立一个基于OCC的建模和显示的开发框架势在必行。今天，这是今天的成果：显示是不是真心的丑啊！有需要的联... 
博文
来自： weixin_30566063的博客
建立最简单的OpenCASCADE程序 
阅读数 6108 
第一次接触OpenCASCADE，如何使用MFC建立OpenCASCADE程序？这里有一个纯手工打造的demo 。 ... 
博文
来自： 力为的博客


python IDLE 打不开 环境变量都配置对了，求大神帮助！谢谢！！！ 
08-10
Microsoft Windows XP [版本 5.1.2600] (C) 版权所有 1985-2001 Microsoft Corp. C:\Documents and Settings\Administrator>C:\Python27\Lib\idlelib\idle.py Traceback (most recent call last): File "C:\Python27\Lib\idlelib\idle.py", line 11, in <module> idlelib.PyShell.main() File "C:\Python27\Lib\idlelib\PyShell.py", line 1389, in main root = Tk(className="Idle") File "C:\Python27\lib\lib-tk\Tkinter.py", line 1685, in __init__ self.tk = _tkinter.create(screenName, baseName, className, interactive, want objects, useTk, sync, use) _tkinter.TclError: Can't find a usable init.tcl in the following directories: {C:\Program Files\CSR\BlueSuite 2.4.8;C:/Python34/tcl/tcl8.6;C:/Python27/tcl /tcl8.5} C:/Python27/lib/tcl8.5 C:/lib/tcl8.5 C:/lib/tcl8.5 C:/library C:/librar y C:/tcl8.5.2/library C:/tcl8.5.2/library This probably means that Tcl wasn't installed properly. 
问答
pythonocc进阶学习：CAE——应力云图显示（colorscale） 
阅读数 296 
from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeBoxfrom OCC.Core.AIS import AIS_Shapefrom OCC.Core.... 
博文
来自： weixin_42755384的博客
关注
Jelly_Lee2

17篇文章
排名:千里之外

关注
LuckyLZQ

15篇文章
排名:千里之外

关注
my393661

62篇文章
排名:千里之外

PythonOCC基础使用：基础建模指令(重要!!!) 
阅读数 2951 
opencascade的c++版的入门教程(https://www.opencascade.com/doc/occt-7.2.0/overview/html/occt__tutorial.html#s... 
博文
来自： weixin_42755384的博客
PythonOCC基础使用：建模——矩阵变换（平移/旋转/缩放/镜像） 
阅读数 346 
占坑 
博文
来自： weixin_42755384的博客
pythonOCC例子搬运：5.显示画面上叠加信息与动画 
阅读数 208 
这里返回总目录&gt;&gt;返回总目录core_visualization_overpaint_viewer.py本例从https://github.com/tpaviot/pyth... 
博文
来自： weixin_42755384的博客


如何提取OCC（Open CASCADE）中V3d_View的图形数据？ 
10-14
最近遇到难题。 由于绘图采用开源的Open CASCADE库，自己又没吃透它。 只好上csdn来请教各位大侠了。 问题如下： 我想把视图中的数据提取出来然后还原到另一个视图中。 视图是V3d_View
论坛
Construction of Primitives in Open Cascade 
阅读数 18 
Construction of Primitives in Open Cascadeeryar@163.com一、创建基本图元 Making Primitives将用到如下的类创建基本图元，包括长方体... 
博文
来自： weixin_33852020的博客
OpenCasCade开发环境搭建 
阅读数 1398 
目录我的安装环境OpenCasCade下载和安装OpenCasCade编译、示例运行及使用总结我的安装环境：Windows7 旗舰版 SP1 x64；Visual Studio 2010 SP1；Op... 
博文
来自： 积累点滴，保持自我
基于OpenCASCADE的CAD平台分… 
阅读数 1229 
原文地址：基于OpenCASCADE的CAD平台分析报告作者：Dr.WangOpen CASCADE （简称OCC）是一开源的几何造型引擎。基于该建模引擎发展了若干CAD/CAE/CAM软件，如国外的... 
博文
来自： CAD_CAE_CFD_EDA
PythonOCC 教程0: 介绍与入门方法 
阅读数 4859 
PythonOCC是 tpaviot 利用python封装OpenCASCADE的社区版本而成的开源CAD库，为广大python用户操纵CAD带来了极大的便利。下图是利用pythonOCC绘制的机翼模... 
博文
来自： QJXLSQQYS123的博客


pythonocc进阶学习：分割面/合并面(体)splitter/glue 
阅读数 162 
占坑。 
博文
来自： weixin_42755384的博客
pythonocc入门指导：2.PyCharm连接pythonOCC开发环境，并运行一个简单实例 
阅读数 1802 
如果你已经阅读了1.创建pythonocc虚拟环境，那么接下来将实际运行一个测试实例，完成第一个程序... 
博文
来自： weixin_42755384的博客
基于OpenCASCADE的CAD软件 
阅读数 3472 
OpenCASCADE是一套开源的CAD/CAM/CAE几何模型核心，来自法国Matra Datavision公司，是著名的CAD软件EUCLID的开发平台。... 
博文
来自： 博客搬往 http://begtostudy.cnblogs.com
学习OpenCascade的一点体会 
阅读数 1万+ 
Normal 0 7.8 磅 0 2 OpenCascade是一个开源的3D造型系统，类似于ACIS，但功能相当ACIS则要弱很... 
博文
来自： astrosky的专栏
OpenCASCADE中是否有面的自相交检测方法？ 
08-12
OCCT中提供了线的自相交，线线相交，线面相交和面面相交的检测方法，但是我没找到检测面的自相交方法，有哪位神人知道面的自相交检测方法吗？先谢谢了！！！
论坛
PythonOCC 教程1: 安装 
阅读数 5785 
PythonOCC的安装提供了多种方式用于安装。一. 对于刚开始上手python的同学，可以直接使用编译好的Anaconda包来进行傻瓜式安装：对于下面代码，若想使用python2.x的版本，则将其中... 
博文
来自： QJXLSQQYS123的博客
PythonOCC基础使用：建模——布尔运算（Boolean operation） 
阅读数 410 
布尔剪（Boolean cut）my_cylinder = BRepPrimAPI_MakeCylinder (gp_Ax2 (gp_Pnt(-3,5,2),gp_Dir (1,0,1)),1,20)... 
博文
来自： weixin_42755384的博客
基于OpenCASCADE自制三维建模软件（十一）使用ASSIMP导入导出 
阅读数 427 
文章目录 
博文
来自： jelatine的博客
pythonocc基础使用：模型信息获取（装配关系，材料，颜色）XCAF 
阅读数 424 
占坑。。。 
博文
来自： weixin_42755384的博客
python+openCV利用cascade分类器训练实现实时视频车辆检测与车牌检测（一） 
阅读数 1万+ 
研究生期间要做一个用行车记录仪抓拍车辆违章的项目，车辆检测算法是其中的一个组成部分，我选择的实现方式是用opencv来实现，废话不多说，先从动机开始说。       1.为什么处理视频选择的是检测而不... 
博文
来自： TripleLift丶的博客
OpenCasCade(九)拓扑运算 
阅读数 74 
1.1.1拓扑运算描述1.1.2 BRepAlgoAPI_Cut(1)功能说明：布尔差运算扣除相交部分，并去除CUT SHAPE(2)构造函数：public OCBR... 
博文
来自： weixin_43712770的博客
OpenCascade与三角剖分 笔记 
阅读数 3670 
笔记摘自 http://www.cppblog.com/eryar/archive/2013/05/26/200605.html概述三角剖分是平面剖分中的一个重要课题，在数字图像处理、计算机三维曲面造... 
博文
来自： 一直被超越，从未被模仿
[C++] OpenCasCade空间几何库的模型展现 
阅读数 2701 
OpenCasCade是什么Open CASCADE（简称OCC）平台是由法国Matra Datavision公司开发的CAD/CAE/CAM软件平台，可以说是世界上最重要的几何造型基础软件平台之一。... 
博文
来自： Method.Jiao的博客
OpenCasCade 简介 
阅读数 3915 
OpenCASCADE是一套开放原始码的CAD/CAM/CAE几何模型核心，源自于法国的MatraDatavision公司，这一套函式库系统原来是著名的CADCAM软体EUCLID的开发平台，但是在1... 
博文
来自： 积累点滴，保持自我
Python面试的一些心得，与Python练习题分享 
阅读数 2118 
关于基础项目打算招聘一个自动化运维，主要需求是python、Linux与shell脚本能力。但面试几天发现一些问题：简历虚假这个不管哪行，简历含水量大都是普遍存在的，看简历犀利的一比，一面是能力弱的一... 
博文
来自： 清风Python
OpenCasCade (一) 3D基础环境 
阅读数 128 
1.1环境描述1.2 基本关系 T=G.Shape(); 几何转换成拓扑。I = new OCAIS_Shape(T);拓扑变成交互对象。Context.Displa... 
博文
来自： weixin_43712770的博客
pythonocc基础使用：1.读取/写入brep，iges，step，stl文件 
阅读数 1653 
待写 
博文
来自： weixin_42755384的博客
OCC从入门到放弃（下载与编译） 
阅读数 383 
下载地址：https://www.opencascade.com/content/latest-release我的vs是2015的，vs2015版本号是vc14，这里我下载的是VC++ 2017 64... 
博文
来自： sendinn的博客
基于OpenCASCADE自制三维建模软件（一）介绍 
阅读数 1399 
自制三维建模软件，基于Qt和OpenCascade开发。 
博文
来自： jelatine的博客
SecureCRT的下载、安装（ 过程非常详细！！值得查看） 
阅读数 2万+ 
SecureCRT的下载、安装和破解（ 过程非常详细！！值得查看）简单介绍下SecureCRT一、SecureCRT的下载二、SecureCRT的安装简单介绍下SecureCRTSecureCRT是一... 
博文
来自： 超Ren专属
python json java mysql pycharm android linux json格式 c#常量定义规则 c#发送按键 c#记住帐号密码 c#mvc框架搭建 c#改变td值 c#怎么读取html文件 c#如何跳出整个循环 c# throw的用法 c# 判断域名端口 c#前景怎么样 
©️2019 CSDN 皮肤主题: 大白 设计师: CSDN官方博客 
 
小新快跑123 
TA的个人主页 >
原创
101
粉丝
89
获赞
42
评论
35
访问
7万+
等级:

周排名:
6467 
积分:
1919 
总排名:
3万+ 
勋章:
 
 
 
关注
私信


最新文章
PythonOCC基础使用：点的性质(glsl定义) 
PythonOCC基础使用：面打孔(holes in face) 
pythonocc基础使用：导入模型——OCAF(iges/step) 
three.js小程序：概述 
PythonOCC封装：2.重新封装pythonocc 
分类专栏
 
threejs小程序
1篇
 
webassembly
2篇
 
assemblyscript
1篇
 
latex
3篇
 
pythonocc
46篇
 
pyqt
1篇
 
linux
4篇
 
opencv
23篇
 
cadquery
 
django
1篇
 
Python
2篇
 
c++
1篇
 
robomaster
1篇
 
x3d
14篇
 
JavaScript
5篇
 
vtk
1篇
 
java
1篇
 
threejs
17篇
 
flask
2篇
 
html
3篇
 
ifcopenshell
1篇
 
pcl
1篇
 
webgl
5篇
 
canvas
1篇
展开 
归档
2020年1月 
3篇
2019年11月 
3篇
2019年10月 
2篇
2019年8月 
20篇
2019年7月 
9篇
2019年6月 
5篇
2019年5月 
8篇
2019年4月 
15篇
2019年3月 
28篇
2019年2月 
8篇
2019年1月 
19篇
2018年12月 
5篇
2018年11月 
3篇
2018年9月 
3篇
展开 
热门文章
（研究生）LaTex论文排版：插入图片及相关功能 
阅读数 3545
robomaster机器视觉（c++/python:opencv）：1.识别装甲板两边光条 
阅读数 3479
PythonOCC入门进阶到实战 
阅读数 3279
conda环境下的包的卸载 
阅读数 3268
pythonocc入门指导：1.搭建pythonocc的虚拟开发环境 
阅读数 2976
最新评论
pythonOCC例子搬运：5.显... 
weixin_44110998：感谢大佬分享 
threejs:从入门,进阶到实战 
fanglrui：嗯，厉害，高实在是高啊 
threejs:从入门,进阶到实战 
m0_38120735：？？？？？？ 
opencv：双目视觉 ——实现详... 
weixin_45919647：[reply]gxw987[/reply]怎样转置呢 


kefu@csdn.net 

QQ客服

客服论坛

400-660-0108 
工作时间 8:30-22:00
关于我们招聘广告服务 网站地图
京ICP备19004658号 经营性网站备案信息
公安备案号 11010502030143
©1999-2020 北京创新乐知网络技术有限公司 网络110报警服务
北京互联网违法和不良信息举报中心
中国互联网举报中心家长监护版权申诉

1









   

 
举报
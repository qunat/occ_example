
2


PythonOCC基础使用：建模——二维草图（线/任意/圆弧/圆/椭圆/三角形/矩形/任意多边形/双曲线/抛物线）
原创
小新快跑123 最后发布于2019-07-12 00:52:32 阅读数 484 

收藏 
展开 
此处感谢佳佳/罗/昌大佬
圆形

from OCC.Core.GC import GC_MakeCircle
from OCC.Core.gp import gp_Pnt
from OCC.Core.gp import gp_Ax2,gp_Dir
from OCC.Display.OCCViewer import rgb_color
#圆形
Circle=GC_MakeCircle(gp_Ax2 (gp_Pnt(0,0,5),gp_Dir (0,0,-1)),8).Value()

if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(Circle,update=True,color=rgb_color(0,0,1))
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
线段

from OCC.Core.gp import gp_Pnt
from OCC.Core.GC import GC_MakeSegment
from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire
from OCC.Display.OCCViewer import rgb_color
# 函数作用：通过两点生成线段
# 输入：两点
# 输出：线段
aSegment = GC_MakeSegment(gp_Pnt(1,1,1), gp_Pnt(1,10,1))
anEdge = BRepBuilderAPI_MakeEdge(aSegment.Value())
aWire = BRepBuilderAPI_MakeWire(anEdge.Edge())
if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(aWire.Shape(), update=True,color=rgb_color(1,0,0))
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
以及从2d转到3d的方法：

from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeWire, BRepBuilderAPI_MakeEdge
from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeCylinder
from OCC.Core.GCE2d import  GCE2d_MakeSegment
from OCC.Core.GeomAPI import geomapi_To3d
from OCC.Core.gp import gp_Pnt2d, gp_Pln, gp_Pnt, gp_Dir
from OCC.Display.SimpleGui import init_display


sideLength=20
l1 = GCE2d_MakeSegment(gp_Pnt2d(-sideLength / 2, sideLength / 2), gp_Pnt2d(sideLength / 2, sideLength / 2))
l2 = GCE2d_MakeSegment(gp_Pnt2d(sideLength / 2, sideLength / 2), gp_Pnt2d(sideLength / 2, -sideLength / 2))
l3 = GCE2d_MakeSegment(gp_Pnt2d(sideLength / 2, -sideLength / 2), gp_Pnt2d(-sideLength / 2, -sideLength / 2))
l4 = GCE2d_MakeSegment(gp_Pnt2d(-sideLength / 2, -sideLength / 2), gp_Pnt2d(-sideLength / 2, sideLength / 2))


e1=BRepBuilderAPI_MakeEdge(geomapi_To3d(l1.Value(),gp_Pln(gp_Pnt(0,0,20),gp_Dir(0,0,1)))).Edge()
e2=BRepBuilderAPI_MakeEdge(geomapi_To3d(l2.Value(),gp_Pln(gp_Pnt(0,0,20),gp_Dir(0,0,1)))).Edge()
e3=BRepBuilderAPI_MakeEdge(geomapi_To3d(l3.Value(),gp_Pln(gp_Pnt(0,0,20),gp_Dir(0,0,1)))).Edge()
e4=BRepBuilderAPI_MakeEdge(geomapi_To3d(l4.Value(),gp_Pln(gp_Pnt(0,0,20),gp_Dir(0,0,1)))).Edge()




display, start_display, add_menu, add_function_to_menu = init_display()

square= BRepBuilderAPI_MakeWire(e1,e2,e3,e4)

display.DisplayShape(square.Wire(), update=True)


my_box = BRepPrimAPI_MakeCylinder(10., 20.).Shape()
display.DisplayShape(my_box,update=True)

start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
三角形

from OCC.Core.GeomAPI import GeomAPI_Interpolate
from OCC.Core.TColgp import TColgp_HArray1OfPnt
from OCC.Core.gp import gp_Pnt, gp_Ax2, gp_DX, gp_Circ, gp_Elips
from OCC.Core.GC import GC_MakeSegment, GC_MakeCircle, GC_MakeArcOfCircle, GC_MakeEllipse
from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire

# 函数作用：通过三点生成任意三角形
# 输入：三点
# 输出：三角形
aSegment1 = GC_MakeSegment(gp_Pnt(1,1,1), gp_Pnt(2,1,5))
anEdge1 = BRepBuilderAPI_MakeEdge(aSegment1.Value())
aWire1 = BRepBuilderAPI_MakeWire(anEdge1.Edge())
aSegment2 = GC_MakeSegment(gp_Pnt(2,1,5), gp_Pnt(9,1,5))
anEdge2 = BRepBuilderAPI_MakeEdge(aSegment2.Value())
aWire2 = BRepBuilderAPI_MakeWire(anEdge2.Edge())
aSegment3 = GC_MakeSegment(gp_Pnt(9,1,5), gp_Pnt(1,1,1))
anEdge3 = BRepBuilderAPI_MakeEdge(aSegment3.Value())
aWire3 = BRepBuilderAPI_MakeWire(anEdge3.Edge())
aTriangle = BRepBuilderAPI_MakeWire(aWire1 .Edge(),aWire2 .Edge(),aWire3 .Edge())
if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(aTriangle.Shape(), update=True)
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
圆弧

from OCC.Core.GeomAPI import GeomAPI_Interpolate
from OCC.Core.TColgp import TColgp_HArray1OfPnt
from OCC.Core.gp import gp_Pnt, gp_Ax2, gp_Dir, gp_Circ, gp_Elips
from OCC.Core.GC import GC_MakeSegment, GC_MakeCircle, GC_MakeArcOfCircle, GC_MakeEllipse
from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire
# 函数作用：通过圆心和半径和角度生成圆弧
# 输入：圆心坐标，半径值，角度值
# 输出：暂定只输出圆弧
Location = gp_Pnt(0,0,0)
Axis = gp_Dir (0,0,-1)
CircleAxis= gp_Ax2(Location, Axis)
Circle = gp_Circ(CircleAxis,5)
ArcofCircle0 = GC_MakeArcOfCircle(Circle, 0/180*3.14, 180/180*3.14, True)
ArcofCircle1 = BRepBuilderAPI_MakeEdge(ArcofCircle0.Value())
ArcofCircle = BRepBuilderAPI_MakeWire(ArcofCircle1.Edge())
if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(ArcofCircle.Edge(),update=True)
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
椭圆

from OCC.Core.GeomAPI import GeomAPI_Interpolate
from OCC.Core.TColgp import TColgp_HArray1OfPnt
from OCC.Core.gp import gp_Pnt, gp_Ax2, gp_Dir, gp_Circ, gp_Elips
from OCC.Core.GC import GC_MakeSegment, GC_MakeCircle, GC_MakeArcOfCircle, GC_MakeEllipse
from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire
# 函数作用：通过半长轴和半短轴及原点绘制椭圆
# 输入：原点坐标，半长轴值，半短轴值
# 输出：暂定只输出椭圆
Location = gp_Pnt(0,0,0)
Axis = gp_Dir(0,0,1)
ElipsAxis= gp_Ax2(Location, Axis)
ElipsAxis0 = gp_Elips(ElipsAxis, 9, 3)
ElipsAxis1 = BRepBuilderAPI_MakeEdge(ElipsAxis0)
ElipsAxis = BRepBuilderAPI_MakeWire(ElipsAxis1.Edge())

if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(ElipsAxis.Edge(),update=True)
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
绘制双曲线hyperbola


from OCC.Core.GCE2d import GCE2d_MakeHyperbola
from OCC.Core.gp import gp_Pnt, gp_Ax2d, gp_Pnt2d, gp_Dir2d
from OCC.Display.SimpleGui import init_display


MajorRadius=5
MinorRadius=1
hyperbola=GCE2d_MakeHyperbola(gp_Ax2d(gp_Pnt2d(0 , 0.2),gp_Dir2d(0,1)),MajorRadius,MinorRadius,False)


display, start_display, add_menu, add_function_to_menu = init_display()

display.DisplayShape(hyperbola.Value(),update=True)


start_display()
    
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
抛物线 parabola
from OCC.Core.GCE2d import GCE2d_MakeParabola
from OCC.Core.gp import gp_Pnt, gp_Ax2d, gp_Pnt2d, gp_Dir2d
from OCC.Display.SimpleGui import init_display


focal=5
parabola=GCE2d_MakeParabola(gp_Ax2d(gp_Pnt2d(0 , 0),gp_Dir2d(0,1)),focal,False)


display, start_display, add_menu, add_function_to_menu = init_display()

display.DisplayShape(parabola.Value(),update=True)


start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
矩形（任意多边形就是改变Pi数量顺次连接）

from OCC.Core.GeomAPI import GeomAPI_Interpolate
from OCC.Core.TColgp import TColgp_HArray1OfPnt
from OCC.Core.gp import gp_Pnt, gp_Ax2, gp_DX, gp_Circ, gp_Elips
from OCC.Core.GC import GC_MakeSegment, GC_MakeCircle, GC_MakeArcOfCircle, GC_MakeEllipse
from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire
# 函数作用：在yz平面上通过一顶点及长宽绘制矩形
# 输入：一顶点坐标，长值，宽值
# 输出：暂定只输出矩形
coor0=[0,3,3]#矩阵某一行
Length=3
Width=1
yPlus = [0, Length, 0]
zPlus = [0, 0, Width]
coor1 = [coor0[i] + yPlus[i] for i in range(3)]
coor2 = [coor0[i] + zPlus[i]+ yPlus[i] for i in range(3)]
coor3 = [coor0[i] + zPlus[i] for i in range(3)]
P0 = gp_Pnt(coor0[0],coor0[1],coor0[2])
P1 = gp_Pnt(coor1[0],coor1[1],coor1[2])
P2 = gp_Pnt(coor2[0],coor2[1],coor2[2])
P3 = gp_Pnt(coor3[0],coor3[1],coor3[2])
aSegment1 = GC_MakeSegment(P0, P1)
anEdge1 = BRepBuilderAPI_MakeEdge(aSegment1.Value())
aWire1 = BRepBuilderAPI_MakeWire(anEdge1.Edge())
aSegment2 = GC_MakeSegment(P1, P2)
anEdge2 = BRepBuilderAPI_MakeEdge(aSegment2.Value())
aWire2 = BRepBuilderAPI_MakeWire(anEdge2.Edge())
aSegment3 = GC_MakeSegment(P2, P3)
anEdge3 = BRepBuilderAPI_MakeEdge(aSegment3.Value())
aWire3 = BRepBuilderAPI_MakeWire(anEdge3.Edge())
aSegment4 = GC_MakeSegment(P3, P0)
anEdge4 = BRepBuilderAPI_MakeEdge(aSegment4.Value())
aWire4 = BRepBuilderAPI_MakeWire(anEdge4.Edge())
aRectangle = BRepBuilderAPI_MakeWire(aWire1 .Edge(),aWire2 .Edge(),aWire3 .Edge(),aWire4 .Edge())
if __name__ == "__main__":
    from OCC.Display.SimpleGui import init_display
    display, start_display, add_menu, add_function_to_menu = init_display()
    display.DisplayShape(aRectangle.Shape(), update=True)
    start_display()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38

点赞 

收藏

分享


 
小新快跑123 
发布了101 篇原创文章 · 获赞 42 · 访问量 7万+
私信 
关注
展开阅读全文 




 
 
pythonocc入门指导：1.搭建pythonocc的虚拟开发环境 
阅读数 2981 
0.前言pythonOCC也就是opencascade的python封装版本1.所需材料anacondaAnaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多... 
博文
来自： weixin_42755384的博客
PythonOCC基础使用：建模——矩阵变换（平移/旋转/缩放/镜像） 
阅读数 345 
占坑 
博文
来自： weixin_42755384的博客
pythonocc入门指导：3.创建属于自己的主界面及对话框及安装qtdesigner 
阅读数 768 
下载一个pyqt5-tool.whl文件：链接：https://pan.baidu.com/s/1V-xdaFbR1R_3xswbQvyfTA提取码：5t3z将此文件放在anaconda prompt... 
博文
来自： weixin_42755384的博客
pythonOCC例子搬运：总目录 
阅读数 800 
该例子搬运自pythonocc官方demo，查看原版可以去github上进行查看。此处为目录，可以快速理解该例子能够做什么，并找到参考对象目录例子1：显示三维轮廓例子2：在点上标注文字例子3：选中体/... 
博文
来自： weixin_42755384的博客


pythonOCC例子搬运：3.选中体/面/边/点 并分析性质 
阅读数 565 
core_display_signal_slots.py本例从https://github.com/tpaviot/pythonocc-demos搬运而来运行版本：0.18.1 在其余版本运行不保证正... 
博文
来自： weixin_42755384的博客
PythonOCC基础使用：建模——布尔运算（Boolean operation） 
阅读数 409 
布尔剪（Boolean cut）my_cylinder = BRepPrimAPI_MakeCylinder (gp_Ax2 (gp_Pnt(-3,5,2),gp_Dir (1,0,1)),1,20)... 
博文
来自： weixin_42755384的博客
PythonOCC基础使用：建模——基础三维实体（球体，长方体，棱柱/台/锥，圆柱/锥/台，环形） 
阅读数 1705 
下面会列举一些基本三维图形命令：长方体my_box = BRepPrimAPI_MakeBox (10,10,10).Shape()球体center=gp_Pnt(5,5,10)radius=19my... 
博文
来自： weixin_42755384的博客
2020年，冯唐49岁：我给20、30岁IT职场年轻人的建议 
阅读数 4万+ 
点击“技术领导力”关注∆每天早上8:30推送作者|Mr.K 编辑| Emma来源|技术领导力(ID：jishulingdaoli)前天的推文《冯唐：职场人35岁以后，方法论比经验重要》，收到了不少读者... 
博文
来自： 技术领导力
Java工作4年来应聘要16K最后没要,细节如下。。。 
阅读数 5万+ 
前奏：今天2B哥和大家分享一位前几天面试的一位应聘者，工作4年26岁，统招本科。以下就是他的简历和面试情况。基本情况：专业技能：1、 熟悉Sping了解SpringMVC、SpringBoo... 
博文
来自： HarderXin的专栏
PythonOCC基础使用:建模——倒角倒圆(二维+三维)_weixi..._CSDN博客 
1-11 
PythonOCC基础使用:建模——矩阵变换(平移/旋转/缩放/..._CSDN博客 
1-6 


PythonOCC进阶学习：界面设计——重新打造主界面 
阅读数 832 
测试一下 
博文
来自： weixin_42755384的博客
PythonOCC基础使用:基础建模指令(重要!!!)_weixin_4275..._CSDN博客 
1-6 
PythonOCC入门进阶到实战_weixin_42755384的博客-CSDN博客 
1-4 
PythonOCC 教程0: 介绍与入门方法 
阅读数 4859 
PythonOCC是 tpaviot 利用python封装OpenCASCADE的社区版本而成的开源CAD库，为广大python用户操纵CAD带来了极大的便利。下图是利用pythonOCC绘制的机翼模... 
博文
来自： QJXLSQQYS123的博客
关注
技术领导力

396篇文章
排名:千里之外

关注
HarderXin

291篇文章
排名:4000+

关注
飞飞机的沐沐风

2篇文章
排名:千里之外

PythonOCC基础使用:建模——布尔运算(Boolean operatio..._CSDN博客 
1-26 
PythonOCC基础使用:建模——三维特征运算(拉伸/放样/管道/沿路径... 
12-15 
PythonOCC基础使用：建模——倒角倒圆（二维+三维） 
阅读数 224 
占坑 
博文
来自： weixin_42755384的博客
Java学习笔记（七十二）—— Cookie 
阅读数 5722 
概述会话技术：会话：一次会话中包含多次请求和响应一次会话：浏览器第一次给服务器发送资源请求，会话建立，直到有一方断开为止功能：在一次会话的范围内的多次请求间，共享数据方式：客户端会话技术：Cookie... 
博文
来自： miles-zh
PythonOCC 教程0: 介绍与入门方法_QJXLSQQYS123的博客-CSDN博客 
1-6 
pythonOCC例子搬运:3.选中体/面/边/点 并分析性质 - we..._CSDN博客 
11-21 
腾讯架构师，为了家庭去小厂，一个月后主动离职：不做中台就是等死 
阅读数 2万+ 
今天咱们第一课，来讲讲大家一直很关注的数据中台。其实，数据中台也是企业数据管理的一部分，甚至可以说是很重要的一部分。一、什么是中台？这其实是一个老生常谈的概念了，中台，顾名思义，就是在起中间作用的东西... 
博文
来自： Leo的博客


pythonocc入门指导:2.PyCharm连接pythonOCC开发环境,并..._CSDN博客 
1-8 
nginx学习，看这一篇就够了：下载、安装。使用：正向代理、反向代理、负载均衡。常用命令和配置文件 
阅读数 5万+ 
文章目录前言一、nginx简介1. 什么是 nginx 和可以做什么事情2.Nginx 作为 web 服务器3. 正向代理4. 反向代理5. 动静分离6.动静分离二、Nginx 的安装三、 Ngin... 
博文
来自： 冯安晨
Python3.7黑帽编程——病毒篇（基础篇） 
阅读数 5万+ 
引子Hacker（黑客），往往被人们理解为只会用非法手段来破坏网络安全的计算机高手。但是，黑客其实不是这样的，真正的“网络破坏者”是和黑客名称和读音相似的骇客。骇客，是用黑客手段进行非法操作并为己取得... 
博文
来自： tiantian520ttjs——Python程序猿~
Java绘图: 使用 Graphics 类绘制线段、矩形、椭圆/圆弧/扇形、图片、文本 
阅读数 7万+ 
本文链接: http://blog.csdn.net/xietansheng/article/details/556691571. Graphics 绘图画布Graphics 类相当于一个画布，每个 ... 
博文
来自： 谢潭生的博客
PythonOCC基础使用：基础建模指令(重要!!!) 
阅读数 2950 
opencascade的c++版的入门教程(https://www.opencascade.com/doc/occt-7.2.0/overview/html/occt__tutorial.html#s... 
博文
来自： weixin_42755384的博客
pythonocc基础使用：2.提取曲线上的点位信息或者曲面上的点位信息 
阅读数 974 
做cad开发，有一个很重要的目的就是识别曲线或者曲面的点位信息。用的主要函数是breptools_UVBounds 和GeomLProp_SurfaceTool.D1 &amp;amp;qu... 
博文
来自： weixin_42755384的博客


pythonocc常见问题集锦 
阅读数 1717 
你在使用过程中可能面临着各种各样的问题，此部分的问题，一是来源于我自己遇到的和网友询问我的，二是从pythonocc社区上搬运过来的（因为那里是全英文，很多人可能看不懂，我会尽力去翻译），我会尽量更新... 
博文
来自： weixin_42755384的博客
Linux常用命令英文全称与中文解释 
阅读数 2844 
Linux常用命令英文全称与中文解释man: Manual 意思是手册，可以用这个命令查询其他命令的用法。pwd：Print working directory 意思是密码。su：Swith ... 
博文
来自： zyb13145的博客
PythonOCC基础使用：建模——三维特征运算（拉伸/放样/管道/沿路径放样 
阅读数 483 
占坑。 
博文
来自： weixin_42755384的博客
破14亿，Python分析我国存在哪些人口危机！ 
阅读数 3万+ 
一、背景二、爬取数据三、数据分析1、总人口2、男女人口比例3、人口城镇化4、人口增长率5、人口老化（抚养比）6、各省人口7、世界人口四、遇到的问题遇到的问题1、数据分页，需要获取从1949-2018年... 
博文
来自： 猪哥
程序员写了一个新手都写不出的低级bug，被骂惨了。 
阅读数 6454 
正文我先描述一下bug的现象哈：这两个输入框的值都是我从KV（Redis之类的存储中间件）里面获取到的，也是可以实时修改的，我自作聪明，想着KV里面如果没值，就默认取一个静态变量，这样有个兜底，在类加... 
博文
来自： Java技术的博客
知乎高赞：中国有什么拿得出手的开源软件产品？(整理自本人原创回答) 
阅读数 10万+ 
知乎高赞：中国有什么拿得出手的开源软件产品？在知乎上，有个问题问“中国有什么拿得出手的开源软件产品（在 GitHub 等社区受欢迎度较好的）？”事实上，还不少呢~本人于2019.7.6进行了较为全面的... 
博文
来自： 大白技术控 - 大白技术Bravo Yeung
致 Python 初学者 
阅读数 23万+ 
欢迎来到“Python进阶”专栏！来到这里的每一位同学，应该大致上学习了很多 Python 的基础知识，正在努力成长的过程中。在此期间，一定遇到了很多的困惑，对未来的学习方向感到迷茫。我非常理解你们所... 
博文
来自： Python作业辅导员 - 天元浪子【许向武】
告别AV画质：实时把动画变成4k高清，延时仅3毫秒，登上GitHub趋势榜 
阅读数 1万+ 
栗子发自凹非寺量子位出品|公众号QbitAI看动画(特别是里番)的时候，总会觉得画质不够好，就算已经有1080p，还是会感到不够清晰。所以，这个世界十分...... 
博文
来自： 量子位
PythonOCC基础使用：建模——三维特征运算（拉伸/放样/管道/沿路径放样） 
阅读数 72 
本文链接：https://blog.csdn.net/weixin_42755384/article/details/95546422拉伸第一种情况：封闭曲线拉伸from OCC.Core.BRepB... 
博文
来自： Allure392491308的博客
在家远程办公效率低？那你一定要收好这个「在家办公」神器！ 
阅读数 2万+ 
相信大家都已经收到国务院延长春节假期的消息，接下来，在家远程办公可能将会持续一段时间。但是问题来了。远程办公不是人在电脑前就当坐班了，相反，对于沟通效率，文件协作，以及信息安全都有着极高的要求。有着非... 
博文
来自： CSDN资讯
蓝桥杯知识点汇总：基础知识和常用算法 
阅读数 1万+ 
此系列包含蓝桥杯所考察的绝大部分知识点，一共有==基础语法==，==常用API==，==基础算法和数据结构==，和==往年真题==四部分，虽然语言以JAVA为主，但算法部分是相通的，C++组的小伙伴也... 
博文
来自： GD_ONE的博客
PythonOCC 教程1: 安装 
阅读数 5785 
PythonOCC的安装提供了多种方式用于安装。一. 对于刚开始上手python的同学，可以直接使用编译好的Anaconda包来进行傻瓜式安装：对于下面代码，若想使用python2.x的版本，则将其中... 
博文
来自： QJXLSQQYS123的博客
实现简单的轮播图（单张图片、多张图片） 
阅读数 7640 
前言刚学js没多久，这篇博客就当做记录了，以后还会完善的，希望大佬们多多指点。ps:下面出现的都是直接闪动，没有滑动效果的轮播图。单张图片的替换·...... 
博文
来自： 阶梯
pythonocc入门指导：2.PyCharm连接pythonOCC开发环境，并运行一个简单实例 
阅读数 1802 
如果你已经阅读了1.创建pythonocc虚拟环境，那么接下来将实际运行一个测试实例，完成第一个程序... 
博文
来自： weixin_42755384的博客
pythonocc进阶学习：分割面/合并面(体)splitter/glue 
阅读数 162 
占坑。 
博文
来自： weixin_42755384的博客
Python实战：抓肺炎疫情实时数据，画2019-nCoV疫情地图 
阅读数 5万+ 
今天，群里白垩老师问如何用python画武汉肺炎疫情地图。白垩老师是研究海洋生态与地球生物的学者，国家重点实验室成员，于不惑之年学习python，实为我等学习楷模。先前我并没有关注武汉肺炎的具体数据，... 
博文
来自： Python作业辅导员 - 天元浪子【许向武】
动画：《大前端吊打面试官系列》 之原生 JavaScript 精华篇 
阅读数 7482 
????更新日志文中所有修改或补充内容，会在日志中实时更新。2020/01/7 开始决定写近十几万字前端面试系列，规划整个系列目录提纲。2020/01/8 写完部分“面试官到底考察你什么”内容... 
博文
来自： 小鹿动画学编程
python3.6+pyQt5+QtDesigner简易安装教程 
阅读数 4069 
1.python官网下载安装python3.6并配置好环境；2.cmd下运行：pipinstallPyQt5  安装PyQt库;3.cmd下运行：pip3.6installPyQt5-tools安装Q... 
博文
来自： Rocket_J的博客
Python基础知识点梳理 
阅读数 1万+ 
python常见知识点梳理摘要：本文主要介绍一些平时经常会用到的python基础知识点，用于加深印象。python的详细语法介绍可以查看官方编程手册，也有一些在线网站对python语法进行了比较全面的... 
博文
来自： m0_46245938的博客
阿里架构师花近十年时间整理出来的Java核心知识pdf（Java岗） 
阅读数 1万+ 
由于细节内容实在太多啦，所以只把部分知识点截图出来粗略的介绍，每个小节点里面都有更细化的内容！整理了一份Java核心知识点。覆盖了JVM、锁、并发、Java反射、Spring原理、微服务、Zookee... 
博文
来自： kxkxyzyz的博客
pythonOCC例子搬运：5.显示画面上叠加信息与动画 
阅读数 208 
这里返回总目录&gt;&gt;返回总目录core_visualization_overpaint_viewer.py本例从https://github.com/tpaviot/pyth... 
博文
来自： weixin_42755384的博客
python json java mysql pycharm android linux json格式 c#常量定义规则 c#发送按键 c#记住帐号密码 c#mvc框架搭建 c#改变td值 c#怎么读取html文件 c#如何跳出整个循环 c# throw的用法 c# 判断域名端口 c#前景怎么样 
©️2019 CSDN 皮肤主题: 大白 设计师: CSDN官方博客 
 
小新快跑123 
TA的个人主页 >
原创
101
粉丝
89
获赞
42
评论
35
访问
7万+
等级:

周排名:
6467 
积分:
1919 
总排名:
3万+ 
勋章:
 
 
 
关注
私信


最新文章
PythonOCC基础使用：点的性质(glsl定义) 
PythonOCC基础使用：面打孔(holes in face) 
pythonocc基础使用：导入模型——OCAF(iges/step) 
three.js小程序：概述 
PythonOCC封装：2.重新封装pythonocc 
分类专栏
 
threejs小程序
1篇
 
webassembly
2篇
 
assemblyscript
1篇
 
latex
3篇
 
pythonocc
46篇
 
pyqt
1篇
 
linux
4篇
 
opencv
23篇
 
cadquery
 
django
1篇
 
Python
2篇
 
c++
1篇
 
robomaster
1篇
 
x3d
14篇
 
JavaScript
5篇
 
vtk
1篇
 
java
1篇
 
threejs
17篇
 
flask
2篇
 
html
3篇
 
ifcopenshell
1篇
 
pcl
1篇
 
webgl
5篇
 
canvas
1篇
展开 
归档
2020年1月 
3篇
2019年11月 
3篇
2019年10月 
2篇
2019年8月 
20篇
2019年7月 
9篇
2019年6月 
5篇
2019年5月 
8篇
2019年4月 
15篇
2019年3月 
28篇
2019年2月 
8篇
2019年1月 
19篇
2018年12月 
5篇
2018年11月 
3篇
2018年9月 
3篇
展开 
热门文章
（研究生）LaTex论文排版：插入图片及相关功能 
阅读数 3545
robomaster机器视觉（c++/python:opencv）：1.识别装甲板两边光条 
阅读数 3479
PythonOCC入门进阶到实战 
阅读数 3279
conda环境下的包的卸载 
阅读数 3268
pythonocc入门指导：1.搭建pythonocc的虚拟开发环境 
阅读数 2976
最新评论
pythonOCC例子搬运：5.显... 
weixin_44110998：感谢大佬分享 
threejs:从入门,进阶到实战 
fanglrui：嗯，厉害，高实在是高啊 
threejs:从入门,进阶到实战 
m0_38120735：？？？？？？ 
opencv：双目视觉 ——实现详... 
weixin_45919647：[reply]gxw987[/reply]怎样转置呢 


kefu@csdn.net 

QQ客服

客服论坛

400-660-0108 
工作时间 8:30-22:00
关于我们招聘广告服务 网站地图
京ICP备19004658号 经营性网站备案信息
公安备案号 11010502030143
©1999-2020 北京创新乐知网络技术有限公司 网络110报警服务
北京互联网违法和不良信息举报中心
中国互联网举报中心家长监护版权申诉











   

 
举报